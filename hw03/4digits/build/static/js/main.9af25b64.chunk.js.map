{"version":3,"sources":["App.js","index.js"],"names":["randomUniqueSequence","n","digits","i","push","_","shuffle","slice","join","PlayingGame","currentGuess","guesses","gameState","setCurrentGuess","answer","setGameState","setGuesses","makeGuess","console","log","length","currentGuessInfo","correctPositions","wrongPositions","index","letter","answerIndex","indexOf","guessInfo","value","onChange","event","potentialGuess","target","test","val","seen","Set","c","has","add","onlyUniques","onKeyDown","key","onClick","className","map","guess","WonGame","LostGame","App","useState","setAnswer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9af25b64.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from 'react'\nimport _ from 'lodash'\n\nconst randomUniqueSequence = n => {\n    const digits = [];\n    for (let i = 0; i < 10; i += 1) {\n        digits.push(i);\n    }\n    const shuffled = _.shuffle(digits);\n    return shuffled.slice(0, n).join(\"\");\n};\n\nconst containsOnlyDigits = val => {\n    return /^\\d*$/.test(val);\n};\n\nconst onlyUniques = val => {\n    const seen = new Set();\n    for (let c of val) {\n        if (seen.has(c)) {\n            return false;\n        }\n        seen.add(c);\n    }\n    return true;\n};\n\nconst guessLength = 4;\nconst maxTries = 8;\n\nfunction PlayingGame({currentGuess, guesses, gameState, setCurrentGuess, answer, setGameState, setGuesses}) {\n\n    const typeDigit = event => {\n        const potentialGuess = event.target.value;\n        if (potentialGuess.length <= guessLength && containsOnlyDigits(potentialGuess) && onlyUniques(potentialGuess)) {\n            setCurrentGuess(potentialGuess);\n        }\n    };\n\n    const handleKeyPress = event => {\n        if (event.key === \"Enter\") {\n            makeGuess();\n        }\n    };\n\n    const guessInfo = () => {\n        let correctPositions = 0;\n        let wrongPositions = 0;\n        for (let index = 0; index < currentGuess.length; index += 1) {\n            const letter = currentGuess[index];\n            const answerIndex = answer.indexOf(letter);\n            if (answerIndex === index) {\n                correctPositions += 1;\n            } else if (answerIndex !== -1) {\n                wrongPositions += 1;\n            }\n        }\n        return {correctPositions, wrongPositions};\n    };\n\n    const makeGuess = () => {\n        console.log(answer);\n        if (currentGuess.length === guessLength) {\n            const currentGuessInfo = guessInfo();\n            guesses.push({digits: currentGuess, ...currentGuessInfo});\n            if (currentGuessInfo.correctPositions === guessLength) {\n                setGameState(\"won\");\n            } else if (guesses.length === maxTries) {\n                setGameState(\"lost\");\n            }\n            setGuesses(guesses);\n            setCurrentGuess(\"\");\n        }\n    };\n\n    if (gameState !== \"playing\") {\n        return null;\n    }\n\n    return (\n        <div>\n            <input value={currentGuess} onChange={typeDigit} onKeyDown={handleKeyPress}/>\n            <button onClick={makeGuess}>Guess</button>\n            <table className={\"guessTable\"}>\n                <thead>\n                    <tr>\n                        <th>Guess</th>\n                        <th>Same Positions</th>\n                        <th>Different Positions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {guesses.map((guess, index) =>\n                        <tr key={index}>\n                            <td>{guess.digits}</td>\n                            <td>{guess.correctPositions}</td>\n                            <td>{guess.wrongPositions}</td>\n                        </tr>)\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nfunction WonGame({gameState, answer}) {\n    if (gameState !== \"won\") return null;\n\n    return (\n        <div>\n            <h1>You Won!</h1>\n            <h2>{answer}</h2>\n        </div>\n    )\n}\n\nfunction LostGame({gameState}) {\n    if (gameState !== \"lost\") return null;\n\n    return (\n        <div>\n            <h1>You Lost!</h1>\n        </div>\n    )\n}\n\nfunction App() {\n\n    const [guesses, setGuesses] = useState([]);\n    const [answer, setAnswer] = useState(randomUniqueSequence(guessLength));\n    const [currentGuess, setCurrentGuess] = useState(\"\");\n    const [gameState, setGameState] = useState(\"playing\");\n\n    const reset = () => {\n        setGuesses([]);\n        setAnswer(randomUniqueSequence(guessLength));\n        setCurrentGuess(\"\");\n        setGameState(\"playing\");\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>4Digits!</h1>\n            <button className={\"reset\"} onClick={reset}>Reset</button>\n            <PlayingGame answer={answer} currentGuess={currentGuess} gameState={gameState} guesses={guesses}\n                         setCurrentGuess={setCurrentGuess} setGameState={setGameState} setGuesses={setGuesses}/>\n            <WonGame gameState={gameState} answer={answer}/>\n            <LostGame gameState={gameState}/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}